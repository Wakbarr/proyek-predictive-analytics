# -*- coding: utf-8 -*-
"""Proyek-Predictive-Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HVgaRBxB0Z3FEdOcFt50TTskmGs31jb3

# Proyek Predictive Analytics : Etherium

- **Nama:** Akbar Widianto
- **Email:** wdntoakbar@gmail.com
- **ID Dicoding:** wakbarr

# Summary
Proyek ini berfokus pada analisis keuangan untuk memprediksi harga Ethereum (ETH) menggunakan tiga algoritma machine learning: K-Nearest Neighbors (KNN), Random Forest, dan AdaBoost. Data yang digunakan adalah data historis harga Ethereum yang mencakup berbagai metrik harga harian, yang kemudian diproses untuk membangun model prediksi.

# Pengolahan Data

## Import Library

### Library berikut digunakan untuk analisis data, visualisasi, dan pemodelan:
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor

"""## Memuat Dataset

### Dataset historis Ethereum dimuat dari file CSV dan diurutkan berdasarkan tanggal:
"""

df = pd.read_csv('ethereum.csv')
df.sort_values(by='Date', inplace=True)
df.set_index('Date', inplace=True)
df.head()

"""### Berikut adalah deskripsi kolom dalam dataset:

| No | Kolom       | Tipe Data | Penjelasan                                                            |
| -- | ----------- | --------- | --------------------------------------------------------------------- |
| 1  | `SNo`       | `int64`   | Nomor urut data, biasanya hanya sebagai index atau penanda baris      |
| 2  | `Name`      | `object`  | Nama koin kripto, dalam hal ini kemungkinan semua bernilai "Ethereum" |
| 3  | `Symbol`    | `object`  | Simbol dari koin, seperti `ETH`                                       |
| 4  | `High`      | `float64` | Harga tertinggi Ethereum dalam periode (misalnya harian)              |
| 5  | `Low`       | `float64` | Harga terendah Ethereum dalam periode                                 |
| 6  | `Open`      | `float64` | Harga saat pasar dibuka dalam periode itu                             |
| 7  | `Close`     | `float64` | Harga saat pasar ditutup dalam periode itu                            |
| 8  | `Volume`    | `float64` | Total volume perdagangan Ethereum (jumlah transaksi) dalam periode    |
| 9  | `Marketcap` | `float64` | Kapitalisasi pasar Ethereum = harga x total supply                    |
"""

df.info()

"""## Praproses Data

### Kolom yang tidak relevan untuk analisis dihapus:
"""

df.drop(['SNo', 'Name', 'Symbol', 'Volume', 'Marketcap'], axis=1, inplace=True)

"""### Fitur baru berupa rata-rata harga harian dibuat:"""

df['OHLC_Average'] = df[['Open', 'High', 'Low', 'Close']].mean(axis=1)

"""### Target prediksi, yaitu harga penutupan 30 hari ke depan, ditambahkan:"""

df['Price_After_Month'] = df['Close'].shift(-30)

"""### Baris dengan nilai kosong dihapus:"""

df.dropna(inplace=True)

"""## Penanganan Outlier

## Outlier dideteksi dan dihapus menggunakan metode IQR:
"""

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1
df = df[~((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).any(axis=1)]

"""#Penjelasan Statistik dan Penanganan Outlier
Output statistik memberikan informasi penting terkait sebaran data untuk masing-masing kolom:

*   count: Jumlah total data yang tersedia pada kolom (bukan nilai kosong).

*   mean: Nilai rata-rata dari data pada kolom tersebut.

*   std: Standar deviasi, mengukur seberapa besar penyebaran data terhadap rata-ratanya.

*   min: Nilai terkecil pada kolom.

*   25% (Q1): Kuartil pertama, yaitu nilai di bawah 25% data berada.

*   50% (Median): Kuartil kedua atau nilai tengah dari data.

*   75% (Q3): Kuartil ketiga, yaitu nilai di bawah 75% data berada.

*   max: Nilai maksimum pada kolom.

Berdasarkan nilai Q1 dan Q3, kita dapat menghitung IQR (Interquartile Range) yang digunakan untuk mendeteksi outlier, yaitu nilai-nilai yang berada di luar rentang:

## Pemisahan Fitur dan Target

### Fitur (X) dan target (y) dipisahkan:
"""

X = df.drop('Price_After_Month', axis=1)
y = df['Price_After_Month']

"""## Normalisasi Data

### Fitur dinormalisasi menggunakan StandardScaler:
"""

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

"""## Pembagian Data

### Data dibagi menjadi 80% data latih dan 20% data uji:
"""

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, train_size=0.8, random_state=42)

"""# Analisis Data Eksplorasi (EDA)

## Distribusi Data

### Histogram digunakan untuk melihat distribusi data:
"""

df.hist(bins=50, figsize=(20, 15))
plt.tight_layout()
plt.show()

"""## Hubungan Antar Fitur

### Matriks korelasi divisualisasikan untuk memahami hubungan antar variabel:
"""

plt.figure(figsize=(10, 8))
sns.heatmap(df.corr().round(2), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title("Matriks Korelasi Fitur")
plt.show()

"""# Pemodelan

## Inisialisasi dan Pelatihan Model

### Tiga model machine learning diinisialisasi dan dilatih:
"""

# KNN
knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)

# Random Forest
rf = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=42)
rf.fit(X_train, y_train)

# AdaBoost
boosting = AdaBoostRegressor(n_estimators=50, learning_rate=0.05, random_state=42)
boosting.fit(X_train, y_train)

"""## Evaluasi Model

### Performa model diukur menggunakan MSE dan R² Score:
"""

models = {'KNN': knn, 'Random Forest': rf, 'AdaBoost': boosting}
for name, model in models.items():
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print(f"{name} - MSE: {mse:.2f}, R² Score: {r2:.4f}")

"""# Evaluasi dan Prediksi

## Prediksi Harga 30 Hari ke Depan

### Data 30 hari terakhir digunakan untuk memprediksi harga ke depan dengan model KNN:
"""

X_future = X_scaled[-30:]
forecast = knn.predict(X_future)

forecast_dates = pd.date_range(start=pd.to_datetime(df.index[-1]), periods=31, freq='D')[1:]
forecast_df = pd.DataFrame({'Date': forecast_dates, 'Predicted_Price': forecast})
forecast_df.set_index('Date', inplace=True)

print("\nPrediksi Harga Ethereum 30 Hari ke Depan:")
print(forecast_df.head())

"""### Visualisasi hasil prediksi:"""

forecast_df.plot(figsize=(10, 5), title='Prediksi Harga Ethereum 30 Hari ke Depan')
plt.ylabel("Harga (USD)")
plt.grid(True)
plt.show()

"""## Perbandingan Prediksi dan Data Aktual

### Perbandingan antara harga aktual dan prediksi Random Forest untuk 100 data pertama:
"""

plt.figure(figsize=(10, 5))
plt.plot(y_test.values[:100], label='Harga Aktual', marker='o')
plt.plot(rf.predict(X_test)[:100], label='Harga Prediksi (RF)', marker='x')
plt.title('Perbandingan Harga Aktual vs Prediksi (Sample 100 Data)')
plt.xlabel('Indeks')
plt.ylabel('Harga Penutupan')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""### Proyek ini berhasil mengimplementasikan analisis dan prediksi harga Ethereum dengan pendekatan machine learning, memberikan wawasan tentang performa model dan potensi harga di masa depan."""